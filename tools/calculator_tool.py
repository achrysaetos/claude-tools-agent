from pydantic import BaseModel, Field
from .tool_base import ToolBase # Relative import
from typing import Any

class CalculatorInput(BaseModel):
    num1: float = Field(..., description="The first number.")
    num2: float = Field(..., description="The second number.")
    operator: str = Field(..., description="The operator to use, one of ['+', '-', '*', '/'].")

class CalculatorTool(ToolBase):
    name = "calculate"
    description = "A calculator for basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/)."
    input_schema = CalculatorInput

    def execute(self, num1: float, num2: float, operator: str, **kwargs: Any) -> Any:
        if operator == "+":
            return num1 + num2
        elif operator == "-":
            return num1 - num2
        elif operator == "*":
            return num1 * num2
        elif operator == "/":
            if num2 == 0:
                return "Error: Division by zero"
            return num1 / num2
        else:
            return "Invalid operator"

# The old schema dictionary is no longer needed here, it will be generated by ToolBase
# calculator_schema = {
# "name": "calculate",
# "description": "A calculator for basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/).",
# "input_schema": CalculatorInput.model_json_schema()
# } 